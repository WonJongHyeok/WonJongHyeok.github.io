---
layout: post
title: JWT Token
date: 2025-03-10 13:20:23 +0900
category: WebServer 인증
---
# JWT Token
> JWT
JWT(JSON Web Token) 는 웹 표준으로 데이터의 JSON객체를 사용하여 가볍고 자가 수용적인 방식으로 정보를 안전하게 전달할 수 있는 토큰 기반의 인증기반이다
>
> JWT는 URL, HTTP Header, HTML Form과 같은 다양한 방식으로 전달할 수 있으며 서버와 클라이언트간의 인증정보를 포함한다
>
> JWT는 Header(JWT의 타입, 암호화 알고리즘을 포함하는 JSON), Payload(클레임 정보를 포함하고 JSON형식으로 인코딩된다, 클레임 정보는 사용자 ID, 권한들의
> 정보를 포함), Sidnature( Header, Payload를 조합한 후, 비밀 키를 사용하여 생성된 서명 값, 서명값은 토큰의 무결성을 보장하고, JWT를 조작하지 않았다는걸 검증)
> ## JWT Token을 이용한 인증 방식
> 1.클라이언트가 서버에 로그인 요청을 보냅니다.
> 2.서버는 로그인 요청을 검증하고, 유요한 사용자라면 JWT를 생성하여 클라이언트에게 반환합니다.
> 3.클라이언트는 이후 요청에 JWT를 포함시켜 전송합니다.
> 4.서버는 JWT를검증하여, 클라이언트의 인증 여부를 판단합니다.

> ## JWT Token의 장점과 단점
> ### 장점
> 1. 토큰 기반의 인증 방식이므로, 서버 측에서 별도의 세션 저장소를 유지할 필요가 없습니다.
> 2. JSON 형식으로 인코딩 되므로 다양한 플랫폼 간에 쉽게 전송 및 구현할 수 있습니다.
> 3. Sifature 을 사용하여 무결성을 보장하므로, 토큰이 변조되었는지 여부를 쉽게 검증할 수 있습니다.
>
> ### 단점
> 1. JWT의 크기가 커질 경우, 네트워크 대역폭이 증가하게 됩니다.
> 2. JWT는 한 번 발급된 후에는 내부 정보를 수정할 수 없으므로, 만료 시간을 짧게 설정해야 합니다.
> 3. JWT를 탈취당하면, 헤딩 토큰을 사용한 모든 요청이 인증 되므로, 보안 위협이 될 수 있습니다. 따라서 HTTPS와 같은 보안 프로토콜을 사용하여 JWT를 전송해야 합니다.

> ## JWT Token 사용법
> https://jwt.io/libraries?language=Java 에서 사용할 maven: io.jsonwebtoken / jjwt-root / 0.11.1 형식을 찾고 maven Repository에서 버전에 맞춰서 gradle에 입력한다. 

	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'

	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'

	// https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-jackson
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
> 난 jjwt-api, jjwt-impl, jjwt-jackson을 사용했다.
> 그리고 token을 만들어주는 create() 와 token을 검증해주는 validation()을 만들어 주었다. 그리고 데이터를 넘겨주는 claims와 시간을 나타내주는 expiredAt을 만들어주고, Jwts라는 클래스를 이용해 jwt token을 sign할때 사용할 키와 사용할 알고리즘을 넣었고, 어떠한 데이터를 body에 넣기 위해 setClaims에 claims를 넣고 시간을 나타내주는 setExpiration에  _expireAr을 넣었다. 이때 setExpiration은 date를 지원하기에 단위를 변경해주는 
```java 
var _expireAt =Date.from(expireAt.atZone(ZoneId.systemDefault()).toInstant());
```
해당 코드를 입력했다.
> 그리고 validation(){}에 create()에서 사용했던 방식의 키를 입력해주고 paser를 만들어 주었는데 Jwts클래스의 setsigningKey를 통해서 키를 확인하도록 코드를 짜주었다. 그리고 정상적으로 파싱이 되었을때 나타나는 body를 작성했다.
